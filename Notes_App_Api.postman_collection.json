{
	"info": {
		"_postman_id": "f77bef73-f495-411f-97e9-59f6f0811575",
		"name": "Notes_App_Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27660714"
	},
	"item": [
		{
			"name": "Add Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"   pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', ()=> {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Catatan A \",\r\n   \"tags\": [\"Android\", \"Web\"],\r\n   \"body\": \"Isi dari catatan A \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response content header should have application/json value', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', ()=>{\r",
							"\r",
							"    const responseJSON = pm.response.json()\r",
							"    pm.expect(responseJSON).to.be.an('object')\r",
							"})\r",
							"\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJSON = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status')\r",
							"    pm.expect(responseJSON.status).to.equals('success')\r",
							"    pm.expect(responseJSON).to.have.ownProperty('data')\r",
							"    pm.expect(responseJSON).to.be.an('object')\r",
							"});\r",
							"\r",
							"pm.test('response body data should have a notes array and contain atleast 1 items', ()=>{\r",
							"    const responseJSON = pm.response.json()\r",
							"    const {data}= responseJSON\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('notes')\r",
							"    pm.expect(data.notes).to.be.an('array')\r",
							"    pm.expect(data.notes).lengthOf.at.least(1)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Note By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response content header should have application/json value', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', ()=>{\r",
							"\r",
							"    const responseJSON = pm.response.json()\r",
							"    pm.expect(responseJSON).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJSON = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status')\r",
							"    pm.expect(responseJSON.status).to.equals('success')\r",
							"    pm.expect(responseJSON).to.have.ownProperty('data')\r",
							"    pm.expect(responseJSON).to.be.an('object')\r",
							"});\r",
							"\r",
							"pm.test('response body data should have a note object and contain atleast 1 items', ()=>{\r",
							"    const responseJSON = pm.response.json()\r",
							"    const {data}= responseJSON\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('note')\r",
							"    pm.expect(data.note).to.be.an('object')\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test('response body data note should have the variables id, title, tags, and body', ()=>{\r",
							"    const responseJSON = pm.response.json()\r",
							"    const {data:{note}} = responseJSON\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A ';\r",
							"    const expectedTags = ['Android','Web'];\r",
							"    const expectedBody = 'Isi dari catatan A ';\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id')\r",
							"    pm.expect(note).to.have.ownProperty('title')\r",
							"    pm.expect(note).to.have.ownProperty('tags')\r",
							"    pm.expect(note).to.have.ownProperty('body')\r",
							"\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"    pm.expect(note.title).to.equals(expectedTitle);\r",
							"    pm.expect(note.tags).to.eql(expectedTags);\r",
							"    pm.expect(note.body).to.equals(expectedBody);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('reponse content type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJSON = pm.response.json()\r",
							"    pm.expect(responseJSON).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response should have the right property and values', () => {\r",
							"    const responseJSON = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status')\r",
							"    pm.expect(responseJSON.status).to.be.equals('success')\r",
							"    pm.expect(responseJSON).to.have.ownProperty('message')\r",
							"    pm.expect(responseJSON.status).to.be.equals('success')\r",
							"})\r",
							"\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId')\r",
							"\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        pm.test('then the updated note should contain the latest data', () => {\r",
							"            if (!error) {\r",
							"                const responseJSON = response.json()\r",
							"                const { data: { note } } = responseJSON\r",
							"\r",
							"                const expectedTitle = 'Catatan A Revisi'\r",
							"                const expectedTags = [\"Android\", \"Web\"]\r",
							"                const expectedBody = 'Isi dari catatan A revisi'\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle)\r",
							"                pm.expect(note.tags).to.eql(expectedTags)\r",
							"                pm.expect(note.body).to.equals(expectedBody)\r",
							"            }\r",
							"        })\r",
							"\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"title\": \"Catatan A Revisi\",\r\n   \"tags\": [\"Android\", \"Web\"],\r\n   \"body\": \"Isi dari catatan A revisi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response Content-type header should have application/json value', ()=> {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body should be an object', ()=> {\r",
							"    const responseJSON = pm.response.json()\r",
							"    pm.expect(responseJSON).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body should have correct property and value', ()=>{\r",
							"    const responseJSON = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status')\r",
							"    pm.expect(responseJSON.status).to.equals('success')\r",
							"    pm.expect(responseJSON).to.have.ownProperty('message')\r",
							"    pm.expect(responseJSON.message).to.equals('data berhasil dihapus')\r",
							"})\r",
							"\r",
							"pm.test('when request the deleted note', ()=>{\r",
							"    const noteId = pm.environment.get('noteId')\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error){\r",
							"            pm.test('the deleted note should be not found', ()=>{\r",
							"                pm.expect(response.code).to.equals(404)\r",
							"\r",
							"                const responseJSON = response.json()\r",
							"                pm.expect(responseJSON.status).to.equals('fail')\r",
							"                pm.expect(responseJSON.message).to.equals('data tidak ditemukan')\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}